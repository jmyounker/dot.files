#!/usr/bin/python

import os
import re
import subprocess
import sys


default_prompt = '${debian_chroot:+($debian_chroot)}\u@\h:\[$(tput -T${TERM:-dumb} setaf 4)\]%(path)s\[$(tput -T${TERM:-dumb} sgr0)\]\$ '
proj_prompt = '${debian_chroot:+($debian_chroot)}\u@\h[\[$(tput -T${TERM:-dumb} setaf 1)\]%(proj)s\[$(tput -T${TERM:-dumb} sgr0)\]]:\[$(tput -T${TERM:-dumb} setaf 4)\]%(path)s\[$(tput -T${TERM:-dumb} sgr0)\]\$ '
msg_prompt = '${debian_chroot:+($debian_chroot)}\u@\h[\[$(tput -T${TERM:-dumb} setaf 1)\]%(msg)s\[$(tput -T${TERM:-dumb} sgr0)\]]:\[$(tput -T${TERM:-dumb} setaf 4)\]%(path)s\[$(tput -T${TERM:-dumb} sgr0)\]\$ '
proj_file = "%(home)s/.proj_current"

path_condensations = {
                      "analytics": "anal",
                      "database": "db",
                      "databases": "dbs",
                      "documents": "docs",
                      "github.com": "gh",
                      "experimental": "exp",
                      "harness": "hrns",
                      "java": "j",
                      "javatests": "jt",
                      "jeff": "j",
                      "jyounker": "jy",
                      "production": "prod",
                      "Python Testing for Dummies": "PTfD",
                      "repos": "r",
                      "tests": "ts",
                      "test": "t",
                      # Unix defaults
                      "bin": "b",
                      "dev": "d",
                      "etc": "e",
                      "home": "h",
                      "include": "inc",
                      "log": "l",
                      "private": "priv",
                      "net": "n",
                      "sbin": "sb",
                      "src": "src",
                      "usr": "u",
                      "var": "v",
                      # Mac defaults
                      "app": "app",
                      "Applications": "Apps",
                      "Library": "Lib",
                      "Network": "Net",
                      "System": "Sys",
                      "Users": "Users",
                      "Volumes": "Vols",
                      "Desktop": "Dsktp",
                      "Documents": "Docs",
                      "Downloads": "Dnlds",
                      "Movies": "Movies",
                      "Music": "Music",
                      "Pictures": "Picts",
                      "Public": "Pub",
                      # SavingGlobal abbreviations
                      "branches": "br",
                      "dev": "d",
                      "git": "g",
                      "main": "mn",
                      "opsys": "o",
                      "savingglobal": "sg",
                      "svn": "s",
                      "trunk": "tr",
                      "webapp": "wa",
                      # Java abbreviations
                      "hibernate": "hbnt",
                      "com": "c",
}

prefix_transforms = {
                     os.environ.get('HOME'): '~',
                     # SoundCloud VMWare shared directory fixes
                     "/mnt/hgfs/dev": "~/d",
                     "/mnt/hgfs/repos": "~/r",
}

def log(message):
    """Appends a log message to a file. Used for debugging."""
    with open('/tmp/get_prompt.log', 'a') as logfile:
        print >> logfile, message


def set_state_expr():
    try:
        path = os.getcwd()
    except OSError, e:
        if e.errno == 2:
            prompt = msg_prompt % {'path': '?',
                                   'msg': 'DUDE! THE DIRECTORY IS GONE. WTF?'}
            return prompt_assignment(prompt)
        raise

    home = os.environ.get('HOME')
    user = os.environ.get('USER')

    cmds = []
    cmds.append(set_prompt_expr(path, home, user))
    cmds.append(set_cdpath_expr(path, home, user))
    return '; '.join(cmds)


def dir_is_available(dir_path):
    try:
        return os.path.exists(dir_path)
    except OSError:
        return False


def set_prompt_expr(path, home, user):
    return prompt_assignment(get_prompt(path, home, user))


def prompt_assignment(prompt):
    return 'PS1=\'%s\'' % prompt


def get_proj_name(proj_config):
    with open(proj_config) as f:
        proj_entry = eval(f.read())
    if 'name' in proj_entry:
        return proj_entry['name']
    else:
        return os.path.basename(os.path.dirname(proj_config))


def get_prompt(path, home, user):
    proj_root = file_in_path(path, '.projrc')
    proj = ""
    if proj_root:
        proj_config = os.path.join(proj_root, '.projrc')
        try:
            proj = get_proj_name(proj_config)
        except:
            proj = os.path.basename(proj_root)
    prompt_path = condense_path(path)

    if home:
        try:
            os.path.exists(home)
        except OSError, e:
            if e.errno == 2:
                return msg_prompt % {'path':prompt_path,
                                     'msg': "DUDE! CAN'T FIND HOME DIRECTORY. WTF?"}
            raise
    try:
        os.path.exists(path)
    except OSError, e:
        if e.errno == 2:
            return msg_prompt % {'path': '?',
                                 'msg': 'THE DIRECTORY %s IS GONE!' % path}
        raise

    if not proj:
        return default_prompt % {'path': prompt_path}

    rcs = rcs_system(path)
    if rcs == RCS_GIT:
        branch = get_git_branch(path)
    else:
        branch = None

    proj_tag = proj
    if branch:
        proj_tag += ':%s' % branch

    virtual_env = os.environ.get('VIRTUAL_ENV')
    if virtual_env:
        proj_tag  += ',%s' % os.path.basename(virtual_env)

    return proj_prompt % {'proj': proj_tag, 'path': prompt_path}


RCS_SVN = 'svn'
RCS_GIT = 'git'


def rcs_system(path):
    files = set(os.listdir(path))
    if os.path.basename(path) == '.git':
        return None
    elif '.svn' in files:
        return RCS_SVN
    elif '.git' in files:
        return RCS_GIT
    elif path == '/':
        return None
    else:
        return rcs_system(os.path.dirname(path))


def get_git_branch(path):
    try:
        output = subprocess.check_output(['/usr/bin/git', 'status', '-b', '--porcelain'],
                                         stderr=subprocess.STDOUT)
    except:
        return None

    untracked_branch = re.search("^##\s+(\S+)\n", output)
    tracked_branch = re.search("^##\s+(\S+)\.\.\.", output)
    branch_match = tracked_branch if tracked_branch else untracked_branch
    if not branch_match:
        return None
    return branch_match.group(1)


def condense_path(path):
    used_abbr = {}
    for full, abbr in path_condensations.items():
        used_abbr[abbr] = full
    return condense_path_dynamic(condense_path_static(path), used_abbr)


def condense_path_static(path):
    def _condense_path(p):
        if p == '/' or p == '':
            return p
        if p in prefix_transforms:
            return condense_path_static(prefix_transforms[p])
        dn, bn = os.path.split(p)
        if bn == '':
            return _condense_path(dn)
        elif bn in path_condensations:
            abbr = path_condensations[bn]
            return os.path.join(_condense_path(dn), abbr)
        else:
            return os.path.join(_condense_path(dn), bn)
    return _condense_path(path)


def condense_path_dynamic(path, used_abbr):
    def _condense_path(p):
        if p == '/' or p == '':
            return p
        dn, bn = os.path.split(p)
        return os.path.join(_condense_path(dn), abbreviate(bn, used_abbr))
    return _condense_path(path)


basename_seg_ptrn = re.compile(r'([A-Z][a-z]+|[a-z]+|[A-Z+]|[^a-zA-Z]+)')
seg_ptrn = re.compile(r'[a-zA-Z]')


def abbreviate(basename, used_abbr):
    segs = [seg for seg in basename_seg_ptrn.findall(basename)]
    abbr_segs = []
    for seg in segs:
        abbr = abbreviate_seg(seg, used_abbr)
        used_abbr[abbr] = seg
        abbr_segs.append(abbr)
    return ''.join(abbr_segs)


def abbreviate_seg(seg, used_abbr):
    # Ensure it's something we can abbreviate
    if not seg_ptrn.search(seg[0]):
        return seg

    # Before lower casing, check if its condensable or if it has already been
    # condensed.
    if seg in path_condensations:
        return path_condensations[seg]
    if seg in used_abbr:
        return seg

    # Run condensations on lower case version.
    seg = seg.lower()
    abbr = seq_seg_abbreviator(seg, used_abbr)
    if abbr not in used_abbr:
        return abbr
    if seg == used_abbr[abbr]:
        return abbr
    return consonant_seg_abbreviator(seg, used_abbr)


def seq_seg_abbreviator(seg, used_abbr):
    abbr = ''
    for x in seg:
        abbr += x
        if abbr not in used_abbr:
            return abbr
        if seg == used_abbr[abbr]:
            return abbr
    return seg


def consonant_seg_abbreviator(seg, used_abbr):
    # Really short names are taken as is
    if len(seg) <= 2:
        return seg
    # All leading vowels are characters are significant.
    # If it ends with a vowel other than e, that vowel is significant.
    # Otherwise, get rid of the vowels.
    seg_wo_vowels = seg[0] + re.sub(r'[aeiou]', '', seg[1:-1]) + re.sub(r'[e]', '', seg[-1])
    # get rid of duplicates
    seg_dedup = ''
    p = ''
    for x in seg_wo_vowels:
        if x == p:
            continue
        p = x
        seg_dedup += x
    return seg_dedup


def write_file(filename, contents):
    try:
        f = open(filename, 'w')
        try:
            f.write(contents)
        finally:
            f.close()
    except:
        pass


def file_in_path(path, filename):
    if os.path.exists(os.path.join(path, filename)):
        return path
    (parent, base) = os.path.split(path)
    if parent == path:
        return ""
    else:
        return file_in_path(parent, filename)    


def parent_of(path, component):
    (parent, base) = os.path.split(path)
    if parent == path:
        return None
    if base == component:
        return parent
    else:
        return parent_of(parent, component)


def set_cdpath_expr(path, home, user):
    if not path.endswith('/'):
        path += '/'
    return 'export CDPATH=\'%s\'' % get_cdpath(path, home, user)


def get_cdpath(path, home, user):
    git_home = file_in_path(path, '.git')
    if not git_home:
        return ':'.join([".", home])
    return ':'.join([".", git_home, home] + dev_paths(path, user, os.path.basename(git_home)))


# Currently this is still the skeleton from when I worked at Google.  It will need to be updated when
# I begin doing big projects again.
def dev_paths(path, user, proj):
    # A set of relative paths
    partial_dev_paths = []

    git5_component = 'git5'
    if ('/%s/' % git5_component) in path:
        git5_path = os.path.join(parent_of(path, git5_component),
                                 git5_component)
        return [os.path.join(git5_path, p) for p in partial_dev_paths]

    return []

if __name__ == '__main__':
    sys.stdout.write(set_state_expr())
