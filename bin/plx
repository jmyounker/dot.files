#!/usr/bin/env python3

import glob
import os
import sys


def main(argv):
    path = os.path.abspath(argv[0])
    rest = argv[1:]
    # Is there at least one argument?
    if not rest:
        # No arguments. Does FOO-BAR-default exist?
        if cmd_exists(path, 'default'):
            # It exissts, so we become FOO-BAR-default.
            exec_subprog(cmd_path(path, 'default'), [])
        else:
            # Doesn't exist, so we show available FOO-BAR subcommands.
            show_subcommands(path)
            return 127
    # There was at least one subcommand!
    subcmd = rest[0]
    subcmd_args = rest[1:]
    # Does FOO-BAR-subcmd exist?
    if cmd_exists(path, subcmd):
        exec_subprog(cmd_path(path, subcmd), subcmd_args)
        return 127
    # FOO BAR help?
    elif subcmd == 'help':
        # FOO BAR help BAZ?
        if subcmd_args:
            # We have FOO BAR help BAZ. Does FOO-BAR-BAZ exist?
            if cmd_exists(path, subcmd_args[0]):
                # FOO-BAR-BAZ exists. Does it have a usage message?
                usage = get_usage(cmd_path(path, subcmd_args[0]))
                if usage:
                    sys.stderr.write(usage)
                    return 0
                else:
                    sys.stderr.write("%s: no help available\n" % subcmd_args[0])
                    return 1
            elif cmd_exists(path, subcmd_args[0], 'help'):
                # We have FOO-BAR-BAZ-help, so we run in.
                exec_subprog(cmd_path(path, subcmd_args[0], 'help'), [])
            else:
                # We don't have FOO-BAR-BAZ, so we show an error and avialable commands.
                sys.stderr.write("%s: no such command\navailable commands:\n" % subcmd_args[0])
                show_subcommands(path)
                return 1
        else:
            # Just FOO BAR help, so we show subcommands.
            show_subcommands(path)
            return 0
    elif cmd_exists(path, 'default'):
        exec_subprog(cmd_path(path, 'default'), rest)
        return 127
    elif any(x in ['-h', '--help'] for x in rest):
        show_subcommands(path)
        return 0
    else:
        show_subcommands(path)
        return 127


def cmd_exists(prog, *cmds):
    return os.path.exists(cmd_path(prog, *cmds))


def cmd_path(prog, *cmds):
    return '-'.join([prog] + list(cmds))


def exec_subprog(prog, args):
    """Only returns if it fails"""
    os.execvpe(prog, [prog] + args, os.environ)


def show_subcommands(path):
    subcmds = set()
    for x in glob.glob(path + '-*'):
        sc = x[len(path) + 1:].split('-')[0]
        if sc != 'default':
            subcmds.add((sc, x))
    for (sc, p) in sorted(subcmds, key=lambda x: x[0]):
        summary = get_summary(p)
        if summary is None:
            print(sc)
        else:
            print("%s - %s" % (sc, summary))


def get_summary(path):
    with open(path) as f:
        ln = 0
        for line in f:
            if ln == 0 and not line.startswith('#!'):
                return None
            elif ln > 1000:
                return None
            elif line.startswith('###'):
                return line[3:].strip()
            ln += 1


def get_usage(path):
    return ''.join(list(get_usage_lines(path)))


def get_usage_lines(path):
    with open(path) as f:
        firstline = True
        for line in f:
            if firstline and not line.startswith('#!'):
                return
            if line.startswith('###'):
                comment = line[3:].strip()
                if comment == '{{cmd.end}}':
                    return
                yield comment + os.linesep
            firstline = False


if __name__ == '__main__':
    sys.exit(main(sys.argv))


