#!/usr/bin/python

import argparse
from contextlib import contextmanager
import os
import re
import string
import subprocess
import sys
import tempfile


proj_file_basename = '.projrc'
hist_to_keep = 50000  # number of project changes to keep
proj_base = os.path.join(os.environ['HOME'], 'repos')


def file_in_path(path, filename):
    if os.path.exists(os.path.join(path, filename)):
        return path
    (parent, base) = os.path.split(path)
    if parent == path:
        return ""
    else:
        return file_in_path(parent, filename)


def shesc(s):
    s = re.sub(r'\\', '\\\\', s)
    s = re.sub(r' ', '\\ ', s)
    s = re.sub(r'\t', '\\t', s)
    return re.sub(r'\n', '\\n', s)


def components(path):
    (dirname, basename) = os.path.split(path)
    if dirname == path:
        return [dirname]
    else:
        return components(dirname) + [basename]


def is_child_of(parent, child):
    parent_path = components(os.path.normpath(parent))
    child_path = components(os.path.normpath(child))
    if len(child_path) < len(parent_path):
        return False
    else:
        return parent_path == child_path[:len(parent_path)]


def create(args):
    proj_name = args.rest[0] if args.rest else None
    if proj_name is None:
        return 1
    proj_db = ProjDb()
    if proj_name in proj_db:
        return 1
    proj = ProjConfig(os.path.join(proj_base, proj_name, proj_file_basename))
    if os.path.exists(proj.config):
        proj_db.add_entry(proj)
        return activate(args)
    if not os.path.exists(proj.root):
        os.mkdir(proj.root)
    proj.write()
    proj_db.add_entry(proj)
    if not os.path.exists(os.path.join(proj.root, '.git')):
        with open('/dev/null', 'w') as FNULL:
            subprocess.call(['git', 'init'], stdout=FNULL, stderr=FNULL, cwd=proj.root)
    return activate(args)


def init(args):
    proj = init_proj(os.getcwd())
    ProjDb().add_entry(proj)
    ProjHist().add_entry(proj)
    return 0


def init_proj(proj_root):
    proj = ProjConfig(os.path.join(proj_root, proj_file_basename))
    proj.write()
    return proj


def ls(args):
    for proj in ProjDb().ls():
        print proj


def forget(args):
    proj_name = args.rest[0] if args.rest else None
    proj_db = ProjDb()
    if proj_name in proj_db:
        proj_db.forget(proj_name)


def setvar(args):
    """Only works from within an active project."""
    if not args.rest:
        return 1
    # Read projects
    proj = get_proj(None)
    if proj is None:
        return 1
    proj.read()
    # Set variables.
    for var_expr in args.rest:
        match = re.search(r'(\S+)=(.*)', var_expr)
        if not match:
            continue
        var = match.group(1)
        val = match.group(2)
        if var != 'name':
            proj.entry[var] = val
        else:
            proj_db = ProjDb()
            proj_db.forget(proj.name)
            proj.entry[var] = val
            proj_db.add_entry(proj)
    proj.write()
    ProjHist().add_entry(proj)
    return 0


def unsetvar(args):
    """Only works from within an active project."""
    if not args.rest:
        return 1
    # Read projects
    proj = get_proj(None)
    if proj is None:
        return 1
    proj.read()
    # Remove variables.
    for var in args.rest:
        del proj.entry[var]
    proj.write()
    ProjHist().add_entry(proj)
    return 0


def activate(args):
    proj_name = args.rest[0] if args.rest else None
    # Read projects
    proj = get_proj(proj_name)
    if proj is None:
        return 1
    proj.read()
    # This is a new project, so it goes in the DB
    if proj_name is None:
        proj_db = ProjDb()
        proj_db.add_entry(proj)
    # Record the project change
    ProjHist().add_entry(proj)
    # Build commands to be executed
    cmds = []
    # Get list of variables set by the last call to activate
    managed_vars = os.environ.get('PROJ_MANAGED_ENVARS', '').split(':')
    # Make sure to get rid of any empty variable names.
    managed_vars = [x for x in managed_vars if x]
    # Delete environment variables set by the previous code
    for var in managed_vars:
        cmds.append('export %s=' % var)
    # Change into the new project if not in the project already
    if not is_child_of(proj.root, os.getcwd()):
        cmds.append('cd %s' % shesc(proj.root))
    # Add exports
    exports = proj.exports()
    cmds += ['export %s=%s' % (var, shesc(val)) for var, val in exports.items()]
    # Set list of managed vars
    cmds.append('PROJ_MANAGED_ENVARS=%s' % ':'.join(exports.keys()))
    # Switch to the specified virtual env
    virtualenv = proj.virtualenv()
    if virtualenv:
        cmds.append('workon %s && export PROJ_MANGED_VIRTUALENV=$VIRTUAL_ENV' % virtualenv)
    else:
        proj_managed_virtualenv = os.environ.get('PROJ_MANGED_VIRTUALENV', '')
        if proj_managed_virtualenv:
            cmds.append('unset PROJ_MANGED_VIRTUALENV')
            current_virtualenv=os.environ.get('VIRTUAL_ENV', None)
            if current_virtualenv and (current_virtualenv == proj_managed_virtualenv):
                cmds.append('deactivate')
    # Write to temp file that will be executed by the calling process
    with executed_cmds(args) as f:
        for cmd in cmds:
            print >> f, cmd
    return 0


@contextmanager
def executed_cmds(args):
    """Manage the file of commands that will be executed by the shell function proj().

    Normally, opens a named temporary file that the caller populates with commands.
    The last action in the file will be a command to remote the file itself.
    Finally, print the name of the executed file to stdout, so that proj() can locate it.

    If the --dump options is specified then write the commands to stdout instead.

    """
    if args.dump:
        yield sys.stdout
    else:
        with tempfile.NamedTemporaryFile('w', delete=False) as f:
            # Print name of this script to stdout
            print f.name
            yield f
            # Delete script as the last thing it does.
            print >> f, "rm %s" % f.name


def get_proj(proj_name=None):
    def containing_proj():
        proj_root = file_in_path(os.getcwd(), proj_file_basename)
        proj_config = os.path.join(proj_root, proj_file_basename)
        if proj_config is None:
            return None
        return ProjConfig(proj_config)
    if proj_name is None:
        return containing_proj()
    elif proj_name is '.':
        proj_hist = ProjHist()
        proj_hist.read()
        if proj_hist.last():
            return ProjDb().get_config(proj_hist.last())
        else:
            return containing_proj()
    else:
        return ProjDb().get_config(proj_name)


class ProjConfig(object):
    def __init__(self, proj_config):
        self.config = proj_config
        self.entry = {}

    def read(self):
        if not os.path.exists(self.config):
            return
        with open(self.config) as f:
            self.entry = eval(f.read())

    def write(self):
        with open(self.config, 'w') as f:
            f.write(repr(self.entry))

    @property
    def name(self):
        if 'name' in self.entry:
            return self.entry['name']
        else:
            return self.root_name

    @property
    def root(self):
        return os.path.dirname(self.config)

    @property
    def root_name(self):
        return os.path.basename(os.path.dirname(self.config))

    def exports(self):
        exports = {}
        exports['PROJ'] = self.name
        exports['PROJ_ROOT'] = self.root
        exports['PROJ_CONFIG'] = self.config
        for expandable in ['GOPATH']:
            if expandable in self.entry:
                val = self.entry[expandable]
                if not val.startswith('/'):
                    val = os.path.join(self.root, val)
                exports[expandable] = val
        return exports

    def virtualenv(self):
        return self.entry.get('virtualenv')


class ProjDb(object):
    def __init__(self):
        self.db = os.path.join(os.environ['HOME'], '.projdb')

    def add_entry(self, proj):
        if not os.path.exists(self.db):
            os.mkdir(self.db)
        proj_db_entry = os.path.join(self.db, proj.name)
        with open(proj_db_entry, 'w') as f:
            f.write(proj.config)

    def get_config_path(self, proj_name):
        if not os.path.exists(self.db):
            return None
        proj_db_entry = os.path.join(self.db, proj_name)
        if not os.path.exists(proj_db_entry):
            return None
        with open(proj_db_entry) as f:
            for line in f:
                match = re.search(r'^\s*(\S.*)', line)
                if match:
                    return match.group(1).rstrip()
        return None

    def get_config(self, proj_name):
        proj_config = self.get_config_path(proj_name)
        if proj_config is None:
            return None
        if not os.path.exists(proj_config):
            return None
        return ProjConfig(proj_config)

    def ls(self):
        if os.path.exists(self.db):
            return os.listdir(self.db)
        else:
            return []

    def forget(self, proj_name):
        if proj_name in self:
            os.unlink(os.path.join(self.db, proj_name))

    def __contains__(self, proj_name):
        return proj_name in set(self.ls())


class ProjHist(object):
    def __init__(self):
        self.db = os.path.join(os.environ['HOME'], '.projhist')
        self.hist_to_keep = hist_to_keep
        self.hist = []
        self.dirty = False

    def read(self):
        if not os.path.exists(self.db):
            return
        with open(self.db) as f:
            for line in f:
                match = re.search(r'^\s*(\S.*)', line)
                if match:
                    self.hist.append(match.group(1).rstrip())
        self.dirty = False

    def last(self):
        return self.hist[-1] if self.hist else None

    def append(self, proj_name):
        if self.last() == proj_name:
            return
        self.hist.append(proj_name)
        self.dirty = True

    def write(self):
        if not self.dirty:
            return
        if len(self.hist) > self.hist_to_keep:
            self.hist = self.hist[len(self.hist) - self.hist_to_keep:-1]
        with open(self.db, 'w') as f:
            for proj in self.hist:
                f.write('%s\n' % proj)
        self.dirty = False

    def add_entry(self, proj):
        self.read()
        self.append(proj.name)
        self.write()


def main(args):
    cmds = { 'create': create,
             'init': init,
             'set': setvar,
             'unset': unsetvar,
             'ls': ls,
             'forget': forget,
             'activate': activate,
             }
    cmd = cmds.get(args.cmd, activate)
    # We have an unknown command, and therefore we're being called as activate, so we need
    # to make it look like we were called as activate.
    if args.cmd not in cmds:
        args.rest = [args.cmd] + args.rest
        args.cmd = 'activate'  # For cleanliness
    return cmd(args)


parser = argparse.ArgumentParser(description='install dot files')
parser.add_argument('-v', '--var', metavar='VAR=VAL', dest='vars', type=str,
    help='set a project variables')
parser.add_argument('--dump', dest='dump', action='store_true', default=False,
    help='dump information to command line instead of files')
parser.add_argument('cmd', metavar='CMD', type=str, help='command to execute')
parser.add_argument('rest', metavar='REST', type=str, nargs='*', help='per command args')

if __name__ == '__main__':
    sys.exit(main(parser.parse_args()))
