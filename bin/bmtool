#!/usr/bin/env python


import json
import optparse
import os
import sys


def main(argv):
    parser = optparse.OptionParser()
    parser.add_option('-f', '--file', dest='filename', default='%(home)s/.bm.json',
                      help='bookmark FILE', metavar='FILE')
    parser.add_option('-s', '--shell', dest='shell', action='store_true', default=False,
                      help='output for shell')
    parser.add_option('-l', '--list', dest='list', action='store_true', default=False,
                      help='list bookmarks')
    parser.add_option('--dump', dest='dump', action='store_true', default=False,
                      help='dump list of bookmarks and locations')
    parser.add_option('-r', '--rename', dest='rename', action='store_true', default=False,
                      help='rename bookmark')
    parser.add_option('-d', '--delete', dest='delete', action='store_true', default=False,
                      help='delete bookmark(s)')
    (opts, args) = parser.parse_args(argv)
    fn = opts.filename % {'home': os.environ['HOME']}
    prog, args = args[0], args[1:]
    data = read(fn)
    bmdb = data['bmdb']
    if opts.dump:
        if len(bmdb) == 0:
            sys.exit(0)
        bookmarks = sorted(bmdb.items(), key=lambda x: x[0])
        if opts.shell:
            print ' ; '.join("echo '%s %s' " % x for x in bookmarks)
        else:
            for x in bookmarks:
                print '%s %s' % x
        sys.exit(0)
    elif opts.rename:
        if len(args) != 2:
            print >> sys.stderr, "usage: %s -r OLD_NAME NEW_NAME" % prog
            sys.exit(127)
        old_name, new_name = args
        if old_name not in bmdb:
            print >> sys.stderr, "bookmark %s does not exist" % old_name
            sys.exit(127)
        bmdb[new_name] = bmdb[old_name]
        del bmdb[old_name]
        write(fn, data)
        sys.exit(0)
    elif opts.delete:
        for name in args:
            if name in bmdb:
                del bmdb[name]
        write(fn, data)
        sys.exit(0)
    elif opts.list or len(args) == 0:
        if len(bmdb) == 0:
            sys.exit(0)
        bookmarks = sorted(bmdb.keys(), key=lambda x: x[0])
        if opts.shell:
            print ' ; '.join("echo '%s' " % x for x in bookmarks)
        else:
            for x in bookmarks:
                print x
        sys.exit(0)
    elif len(args) == 1:
        if args[0] == '.':
            name = anonymous_name(data)
            bmdb[name] = os.getcwd()
            write(fn, data)
            if opts.shell:
                print "echo 'stored bookmark %s'" % name
            else:
                print 'stored bookmark %s' % name
            sys.exit(0)
        elif args[0] in bmdb:
            if opts.shell:
                print "cd %s" % bmdb[args[0]]
            else:
                print bmdb[args[0]]
            sys.exit(0)
        else:
            print >> sys.stderr, "can't find bookmark %s" % args[0]
            sys.exit(1)
    elif len(args) == 2:
        name, path = args
        bmdb[name] = get_path(path)
        write(fn, data)
        if opts.shell:
            print "echo 'stored bookmark %s'" % name
        else:
            print 'stored bookmark %s' % name
        sys.exit(0)
    else:
        print >> sys.stderr, "usage: %s [.|name [path]]" % prog


def anonymous_name(data):
    name = str(data['next'])
    data['next'] = data['next'] + 1
    return name


def get_path(path):
    if path == '.':
        return os.getcwd()
    elif os.path.exists(os.path.join(os.getcwd(), path)):
        return os.path.join(os.getcwd(), path)
    else:
        return path


def read(fn):
    try:
        with open(fn, 'r') as f:
            return json.load(f)
    except:
        return {'next': 1, 'bmdb': {}}


def write(fn, data):
    with open(fn, 'w') as f:
        return json.dump(data, f)


if __name__ == '__main__':
    main(sys.argv)

