#!/usr/bin/python

import argparse
import hashlib
import os
import platform
import re
import shutil
import subprocess
import sys


dirs = [
    ('bin', None),
    ('.ssh', 0700)
]

# Ensure that the set operation below includes UNKNOWN.
uname_to_arch = {'Darwin': 'OSX', 'Linux': 'LINUX', '':'UNKNOWN'}

archs = set(uname_to_arch.values())

files = [
  ('dot.bash_aliases', '.bash_aliases'),
  ('dot.tmux.conf', '.tmux.conf', True),
  ('dot.bashrc', '.bashrc'),
  ('dot.gitconfig', '.gitconfig', True),
  ('dot.gitignore_global', '.gitignore_global'),
  ('dot.profile', '.profile'),
  ('dot.screenrc', '.screenrc'),
  ('bin/get_prompt', 'bin/get_prompt'),
  ('bin/projtool', 'bin/projtool'),
  ('dot.ssh/config', '.ssh/config'),
]

home = os.environ['HOME']


def md5_digest(filename):
    with open(filename) as f:
        return hashlib.md5(f.read()).hexdigest()


def targets(args):
    for target in files:
        if len(target) == 2:
            target = (target[0], target[1], False)
        (source, deployed, translate) = target
        deployed_full_path = os.path.join(home, deployed)
        if (source in args.files or
            deployed in args.files or
            deployed_full_path in args.files or
            not args.files):
            yield (source, deployed_full_path, translate)


def install(args):
  if os.path.exists(os.path.join(home, '.bash_profile')):
      print >> sys.stderr, ".bash_profile exists. This can cause problems. Maybe you should remove it."

  for (dir, perms) in dirs:
      dir_full_path = os.path.join(home, dir)
      if not os.path.exists(dir_full_path):
          os.mkdir(dir_full_path)
      if not perms is None:
          os.chmod(dir_full_path, perms)
      for (source, deployed, translate) in targets(args):
          if not os.path.exists(source):
              continue
          if translate:
              process_file_for_arch(source, deployed, get_arch())
          else:
              shutil.copy2(source, deployed)



def get_arch():
    return uname_to_arch.get(platform.uname()[0], 'UNKNOWN')


def process_file_for_arch(src, dest, arch):
    with open(src, 'r') as src_file:
        with open(dest, 'w') as dest_file:
            for line in filter_for_arch(src_file, arch):
                dest_file.write(line)


has_arch = re.compile(r'^(%s):' % '|'.join(archs))


def filter_for_arch(lines, arch):
    for line in lines:
        match = has_arch.search(line)
        if match and match.group(1) != arch:
            pass
        elif match:
            yield line[len(match.group(0)):]
        else:
            yield line


def recover(args):
  for (source, deployed, translated) in targets(args):
      if os.path.exists(deployed):
          if  translated:
              if md5_digest(source) != md5_digest(deployed):
                  subprocess.call(['p4merge', deployed, source, source, source])
          else:
              shutil.copy2(deployed, source)



def diff(args):
  for (source, deployed, translate) in targets(args):
    if os.path.exists(source) and not os.path.exists(deployed):
        print "File %s not deployed from %s" % (deployed, source)
    elif not os.path.exists(source) and os.path.exists(deployed):
        print "File %s not recovered from %s" % (source, deployed)
    elif os.path.exists(source) and os.path.exists(deployed):
      if md5_digest(source) != md5_digest(deployed):
        subprocess.call(['p4merge', deployed, source])


parser = argparse.ArgumentParser(description='install dot files')
parser.add_argument('--diff', dest='action', action='store_const',
    const=diff, help='diff deployed and source dot files')
parser.add_argument('--install', dest='action', action='store_const',
    const=install, help='install dot files')
parser.add_argument('--recover', dest='action', action='store_const',
    const=recover, help='recover dot files from environment')
parser.add_argument('files', metavar='FILE', type=str, nargs='*',
                   help='a list of files to act on')

if __name__ == '__main__':
    args = parser.parse_args()
    if args.action is None:
        args.action = diff
    args.action(args)

