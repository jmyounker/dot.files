#!/usr/bin/python

from contextlib import contextmanager
import distutils.spawn
import optparse
import hashlib
import os
import platform
import re
import shutil
import StringIO
import subprocess
import sys


def canonicalize_target(t):
    if len(t) == 1:
        return (t[0], None, None)
    elif len(t) == 2:
        return (t[0], t[1], None)
    elif len(t) == 3:
        return t
    else:
        raise Exception("misformatted file definition")


def add_missing_dest(t):
    src, dest, trans = t
    if dest is not None:
        return t
    if src.startswith('dot.'):
        return (src, src[3:], trans)
    else:
        return (src, src, trans)


# Suck in configuration information
execfile('files')
installs = [add_missing_dest(canonicalize_target(t)) for t in installs]
removals = [add_missing_dest(canonicalize_target(t)) for t in removals]


# Ensure that the set operation below includes UNKNOWN.
uname_to_arch = {'Darwin': 'OSX', 'Linux': 'LINUX', '':'UNKNOWN'}

archs = set(uname_to_arch.values())

home = os.environ['HOME']


def md5_digest(filename):
    with open(filename) as f:
        return hashlib.md5(f.read()).hexdigest()


def targets(args, files):
    allowed = set(args.files)
    for (source, deployed, translate) in files:
        if not is_allowed_file(source, deployed, allowed):
            continue
        deployed_full_path = os.path.join(home, deployed)
        if (source in args.files or
            deployed in args.files or
            deployed_full_path in args.files or
            not args.files):
            yield (source, deployed_full_path, translate)


def target_links(args, links):
    allowed = set(args.files)
    for (source, dest) in links:
        if not is_allowed_file(dest, os.path.join(home, dest), allowed):
            continue
        yield (os.path.join(home, source), os.path.join(home, dest))


def completions(args):
    for target in installs:
        print target[0]
        print target[1]
        print os.path.join(home, target[1])
    for target in links:
        print target[1]
        print os.path.join(home, target[1])


def is_allowed_file(src, dest, files):
    if not files:
        return True
    return (src in files) or (dest in files)


def install(args):
  if opts.verbose:
      print >> sys.stderr, "Creating directories..."
  for (dir, perms) in dirs:
      dir_full_path = os.path.join(home, dir)
      if not os.path.exists(dir_full_path):
          if opts.verbose or opts.dry_run:
              print >> sys.stderr, "Creating directory: %s" % dir_full_path
          if not opts.dry_run:
              os.mkdir(dir_full_path)
      if not perms is None:
          os.chmod(dir_full_path, perms)

  if opts.verbose:
      print >> sys.stderr, "Installing files..."
  for (source, deployed, translate) in targets(args, installs):
      if not os.path.exists(source):
          continue
      source_mtime = os.path.getmtime(source)
      # If the file doesn't exist then don't try to check the time.
      if os.path.exists(deployed):
          deployed_mtime = os.path.getmtime(deployed)
      else:
          deployed_mtime = 0
      if not opts.force and deployed_mtime > source_mtime and (translate is None or translate != 'COMPOSITE') :
          print >> sys.stderr, "Skipping locally modified file %s: Use -f to override this." % source
          continue
      if translate is not None:
          if translate == 'TRANSLATE':
              if opts.dry_run or opts.verbose:
                  print >> sys.stderr, "Translating and installing file: %s -> %s" % (source, deployed)
              if opts.dry_run:
                  outfile = StringIO.StringIO()
                  translate_file(source, outfile, get_arch())
                  print >> sys.stderr, outfile.getvalue()
              else:
                  translate_file(source, deployed, get_arch())
          elif translate == 'COMPOSITE':
              if opts.dry_run or opts.verbose:
                  print >> sys.stderr, "Compositing and installing file: %s -> %s" % (source, deployed)
              composite_file(source, deployed, get_arch())
          else:
              print >> sys.stderr, "unknown operation field: %s" % translate
              break
      else:
          if opts.verbose or opts.dry_run:
              print >> sys.stderr, "Installing file: %s -> %s" % (source, deployed)
          if not opts.dry_run:
              shutil.copy2(source, deployed)
      if not opts.dry_run:
          shutil.copystat(source, deployed)

  if opts.verbose:
      print >> sys.stderr, "Removing stale files..."
  for (source, deployed, translate) in targets(args, removals):
      if os.path.exists(deployed):
          if opts.verbose or opts.dry_run:
              print >> sys.stderr, "Removing stale file: %s" % deployed
          if not opts.dry_run:
              os.unlink(deployed)

  if opts.verbose:
      print >> sys.stderr, "Linking files..."
  for (source, dest) in target_links(args, links):
      if opts.verbose or opts.dry_run:
          print >> sys.stderr, "Linking file: %s -> %s" % (source, dest)
      if not opts.dry_run:
          if os.path.exists(dest):
              os.unlink(dest)
          if os.path.exists(source):
              os.symlink(source, dest)

  os.chmod(os.path.join(home, '.ssh', 'config'), 0600)
  os.chmod(os.path.join(home, '.ssh', 'authorized_keys'), 0600)


def get_arch():
    return uname_to_arch.get(platform.uname()[0], 'UNKNOWN')


def translate_file(src, dest, arch):
    with open(src, 'r') as src_file:
        with output_sink(dest) as dest_file:
            for line in filter_for_arch(src_file, arch):
                for expanded_line in expansion(line):
                    dest_file.write(expanded_line)


@contextmanager
def output_sink(dest):
    if isinstance(dest, StringIO.StringIO):
        yield dest
    elif opts.dry_run:
        yield sys.stdout
    else:
       with open(dest, 'w') as f:
           yield f


has_arch = re.compile(r'^(%s):' % '|'.join(archs))


def filter_for_arch(lines, arch):
    for line in lines:
        match = has_arch.search(line)
        if match and match.group(1) != arch:
            pass
        elif match:
            yield line[len(match.group(0)):]
        else:
            yield line


def expansion(line):
    if line.startswith('GEN:'):
        yield subprocess.check_output(line[len('GEN:'):], shell=True)
    else:
        yield line


def recover(args):
  for (source, deployed, translated) in targets(args, installs):
      if os.path.exists(deployed):
          if  translated:
              if md5_digest(source) != md5_digest(deployed):
                  subprocess.call(['p4merge', deployed, source, source, source])
          else:
              shutil.copy2(deployed, source)


def diff(args):
  for (source, deployed, translate) in targets(args, installs):
    if os.path.exists(source) and not os.path.exists(deployed):
        print "File %s not deployed from %s" % (deployed, source)
    elif not os.path.exists(source) and os.path.exists(deployed):
        print "File %s not recovered from %s" % (source, deployed)
    elif os.path.exists(source) and os.path.exists(deployed):
      if md5_digest(source) != md5_digest(deployed):
        if args.summary:
           print "%s %s differ" % (source, deployed)
        else:
           try:
              if distutils.spawn.find_executable('p4merge'):
                  subprocess.call(['p4merge', deployed, source])
              else:
                  subprocess.call(['diff', deployed, source])
           except KeyboardInterrupt:
              sys.exit(0)


def composite_file(src, dest, arch, comment_char='#'):
    generated_part = StringIO.StringIO()
    translate_file(src, generated_part, arch)
    comment_line = '%s ------------ Below here auto-generated. Modifications will be lost. ------------\n' % comment_char
    fixed_part = ""
    if os.path.exists(dest):
        with open(dest, 'r') as dest_file:
            for line in dest_file:
                if line == comment_line:
                    break
                fixed_part += line
    with open(dest, 'w') as dest_file:
        if opts.dry_run or opts.verbose:
            sys.stdout.write(fixed_part)
            sys.stdout.write(comment_line)
            sys.stdout.write(generated_part.getvalue())
        if not opts.dry_run:
            dest_file.write(fixed_part)
            dest_file.write(comment_line)
            dest_file.write(generated_part.getvalue())


parser = optparse.OptionParser(description='install dot files')
parser.add_option('--diff', dest='action', action='store_const',
    const=diff, help='diff deployed and source dot files')
parser.add_option('--install', dest='action', action='store_const',
    const=install, help='install dot files')
parser.add_option('--recover', dest='action', action='store_const',
    const=recover, help='recover dot files from environment')
parser.add_option('--completions', dest='action', action='store_const',
    const=completions, help='show possible file path completions')
parser.add_option('-n', dest='dry_run', action='store_true', default=False,
    help='dry_run')
parser.add_option('-s', '-b', '--summary', '--brief',  dest='summary',
    action='store_true', default=False, help='show a summary of diffs')
parser.add_option('-f', dest='force', action='store_true', default=False,
    help='force deployment')
parser.add_option('-v', dest='verbose', action='store_true', default=False,
    help='be verbose about what is happening')


if __name__ == '__main__':
    (opts, args) = parser.parse_args()
    if opts.action is None:
        opts.action = diff
    opts.files = args
    opts.action(opts)

